<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[tcpdump之我用]]></title>
    <url>%2F2019%2F03%2F27%2Ftcpdump%E4%B9%8B%E6%88%91%E7%94%A8%2F</url>
    <content type="text"><![CDATA[常用tcpdump命令 命令 解释 tcpdump -i any 抓取所有网卡的数据 tcpdump -i eth0 host 192.168.42.1 and port 1111 抓取在eth0上特定IP地址和端口号的数据包 tcpdump -c 5 -nn -i eth0 icmp and src 192.168.100.62 抓取5个主机为192.168.100.62对本机的ping的数据包 tcpdump -c 2 -q -XX -vvv -nn -i eth0 tcp dst port 22 解析ssh数据包 tcpdump -i eth0 udp port 1111 抓取UDP协议并指定端口号 tcpdump -i eth0 udp -w /tmp/br0.pcap &amp; 抓取UDP协议数据并输出为Wireshark格式的文件（结束抓包killall tcpdump） tcpdump –help1234567891011# tcpdump -htcpdump version 4.9.2libpcap version 1.8.1Usage: tcpdump [-aAbdDefhHIJKlLnNOpqStuUvxX#] [ -B size ] [ -c count ] [ -C file_size ] [ -E algo:secret ] [ -F file ] [ -G seconds ] [ -i interface ] [ -j tstamptype ] [ -M secret ] [ --number ] [ -Q in|out|inout ] [ -r file ] [ -s snaplen ] [ --time-stamp-precision precision ] [ --immediate-mode ] [ -T type ] [ --version ] [ -V file ] [ -w file ] [ -W filecount ] [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ] [ expression ]]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[wireshark之我用]]></title>
    <url>%2F2019%2F03%2F27%2Fwireshark%E4%B9%8B%E6%88%91%E7%94%A8%2F</url>
    <content type="text"><![CDATA[过滤器1、捕获过滤器（CaptureFilters）捕获过滤器设置于抓包前，决定想要抓取什么样的报文，捕获过滤器只能过滤协议，不能过滤内容。打开wireshark软件，依次点击捕获-&gt;捕获过滤器，可看到wireshark默认的过滤器规则有： 名称 过滤器 “Ethernet address 00:00:5e:00:53:00” ether host 00:00:5e:00:53:00 “Ethernet type 0x0806 (ARP)” ether proto 0x0806 “No Broadcast and no Multicast” not broadcast and not multicast “No ARP” not arp “IPv4 only” ip “IPv4 address 192.0.2.1” host 192.0.2.1 “IPv6 only” ip6 “IPv6 address 2001:db8::1” host 2001:db8::1 “IPX only” ipx “TCP only” tcp “UDP only” udp “TCP or UDP port 80 (HTTP)” port 80 “HTTP TCP port (80)” tcp port http “No ARP and no DNS” not arp and port not 53 “Non-HTTP and non-SMTP to/from www.wireshark.org&quot; not port 80 and not port 25 and host www.wireshark.org 我们可以借助示例来写出我们自己想要的过滤规则，比如 (host 192.168.1.1 or src net 10.58.0.0/16) and tcp dst portrange 80-8080 and dst net 172.0.0.0/8 2、显示过滤器（DisplayFilters）显示过滤器用于过滤所抓取的报文，方便处理和排查，它不但支持协议过滤而且还支持内容过滤。 2.1 协议过滤根据具体协议ppp || pppoe || pppoed || pppoes 过滤ppp相关报文根据协议的属性值tcp.flags.syn == 1tcp.port == 49264tcp.srcport == 49264ip.addr != 192.168.1.1ip.src == 192.168.1.1http.request.method == &quot;GET&quot;dns.qry.name == &quot;zyx.qq.com&quot;不知道属性值怎么过滤时，可以在wireshark中找到该属性值，右击选中作为过滤器应用-&gt;选中 2.2 内容过滤tcp contains &quot;USER&quot;udp[8:3] == 02:37:61 udp报文的payload前3个字节在遇到大小写敏感的时候，还可以使用函数：upper(string－field)－把字符串转换成大写lower(string－field)－把字符串转换成小写如 lower(http.request.uri) contains “img” 其他查找可以通过按Ctrl+F键，可选显示过滤器、十六进制值、字符串、正则表达式 另外在统计菜单栏里，IO图表，流量图等也均是分析协议的利器]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[git、svn之我用]]></title>
    <url>%2F2019%2F03%2F27%2Fgit%E3%80%81svn%E4%B9%8B%E6%88%91%E7%94%A8%2F</url>
    <content type="text"><![CDATA[git和svn的命令这么多，脑袋不够记怎么办，不如使用git help和svn help来帮你吧 git tag不会用，试试看git help tag，git bisect不会用，试试看git help bisect。同样的，svn patch不会用，试试看svn help patch，svn revert不会用，试试看svn help revert。 具体的命令不会用时，别急着先去Google或者百度，不妨先看看它的help，以下是我整理的常用的命令： Git常用命令列表 命令 解释 git config [–global] -l 查看配置信息 git config –global user.name xxx 配置用户名 git config –global user.email xxx 配置邮箱地址 git config –global commit.template ~/git.commit.template 配置提交模板 git config –global core.editor vi 设置使用的文本编辑器 git config –global color.ui auto 设置输出为彩色 git init 把当前的目录变成可以管理的git仓库 git clone xxx clone某个仓库到本地 git add xxx 把xxx文件添加到暂存区 git rm xxx 删除xxx文件 git clean -dfx 清除本地修改文件 git commit files –m “xxx” 提交文件 –m 后面的是注释 git commit -a files 使用提交模板提交文件 git commit –-amend 修改提交的信息或文件 git status [-uno] 查看仓库状态 git diff xxx [–cached] 查看xxx文件修改了那些内容 git log [–grep=] 查看历史记录 （-p 显示具体修改） git reflog 查看所有历史 包括回退历史 git merge dev 在当前的分支上合并dev分支 git branch 查看当前所有的分支 （-r 查看远程分支） git branch –d dev 删除dev分支 git branch name 创建分支 git branch -a –contains 根据 commit 查找 git 分支名 git stash [show&#124; pop&#124; apply&#124; clear] 把当前的工作隐藏起来 等以后恢复现场后继续工作 （git help stash） git remote 查看远程库的信息(-v 详细信息) git checkout -b 创建并切换到新分支 git checkout – xxx 丢弃xxx文件工作区的改动 git checkout master 切换到master分支 （git checkout -b 创建并切换） git reset –hard 回到删除的版本位置 git reset HEAD xxx 撤出暂存区 git revert [-n] 重置一个提交 git cherry-pick 合并某次提交（-n 只合并） git apply xxx.patch 打入patch git push origin HEAD:refs/for/refs/heads/branchName 把master分支推送到远程库对应的分支上 git push –delete 删除远程端分支 git pull [-r] 将服务器上的代码同步到本地 git fetch 下载远程端版本，但不合并到HEAD中 git rebase HEAD~3 -i 修改已commit的信息 git blame xxx [-L50，100] 文件xxx每行的修改记录 git grep $regexp $(git rev-list –all) 查找修改记录 git tag –a &lt;标签名&gt; -m “标签说明” tag的用法 git help tag git push origin refs/tags/&lt;标签名&gt; 推送tag到中央仓库 git checkout refs/tags/&lt;标签名&gt; 切换到tag git tag -d &lt;标签名&gt;git push origin :refs/tags/&lt;标签名&gt; 删除tag svn常用命令列表 命令 解释 svnadmin create svn仓库的创建/删除 htpasswd [-cmdpsD] passwordfile username svn 用户添加/修改/删除 svn co url 从服务器上下载代码 svn co –depth=empty url work_dir cd work_dir; svn up xxxx 从服务器checkout出单个文件 svn add [delete &#124;rename] 文件增删 改名 svn ci files -m “log” 将files上传到服务器，”xxx”为修改日志 svn up -r 更新到指定版本号 svn st [-q] 查看当前文件状态 svn revert * -R 恢复本目录下的文件 svn diff xxx 查看文件的修改内容 svn cleanup 清除锁定的文件 svn log [-v .] -r &#124;less 查看某个版本号修改了哪些文件及日志 svn info 查看svn的版本号、服务器地址等信息 svn st &#124; grep ‘^?’ &#124; awk ‘{print $2}’ &#124; xargs rm -rf 删除某些文件 svn diff -r5452:5476 &gt; a.patchsvn patch a.patch svn 合并某一版本提交的代码 svn merge xxx@versionNum yyy . 合并某一分支versionNum以后的修改 svn merge dev@100 dev@101 . 合并dev分支的101修改到本目录 svn sw –relocate oldIP/dir newIP/dir linux下修改svn的URL]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[hexo折腾记]]></title>
    <url>%2F2019%2F03%2F27%2Fhexo%E6%8A%98%E8%85%BE%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[1、安装git下载地址：https://desktop.github.com/ 2、安装node.js下载地址：https://nodejs.org/en/可用下列命令查看安装的版本号 node -vnpm -v 3、安装并配置hexo npm install -g hexo-cli 常用hexo命令1234567hexo init blog # 初始化博客hexo n HelloWorld # 新建文章hexo n page &quot;pageName&quot; # 新建页面hexo g # 生成hexo s # 启动服务预览hexo d # 部署hexo clean # 清理缓存 hexo的help如下：123456789101112131415161718192021222324252627Usage: hexo &lt;command&gt;Commands: clean Remove generated files and cache. config Get or set configurations. deploy Deploy your website. generate Generate static files. help Get help on a command. init Create a new Hexo folder. list List the information of the site migrate Migrate your site from other system to Hexo. new Create a new post. publish Moves a draft post from _drafts to _posts folder. render Render files with renderer plugins. server Start the server. version Display version information.Global Options: --config Specify config file instead of using _config.yml --cwd Specify the CWD --debug Display all verbose messages in the terminal --draft Display draft posts --safe Disable all plugins and scripts --silent Hide output on consoleFor more help, you can use &apos;hexo help [command]&apos; for the detailed informationor you can check the docs: http://hexo.io/docs/ 4、配置next主题 git clone https://github.com/theme-next/hexo-theme-next themes/next hexo 首页文章只显示一部分 12# Automatically scroll page to section which is under &lt;!-- more --&gt; mark.scroll_to_more: true hexo 添加站内搜索 1、 安装相关插件 npm install hexo-generator-searchdb --save 若有fsevents相关警告可不必理会，此时已经安装好了 2、 修改根目录下的_config.yml，添加以下内容 12345search: path: search.xml field: post format: html limit: 10000 3、 修改next主题目录下的_config.yml，将local_search的false改为true 12local_search: enable: true hexo 写文章时用到图片如何处理 1、 安装相关插件 npm install hexo-asset-image --save 2、 修改根目录下的_config.yml，将post_asset_folder:这个选项设置为true hexo 修改文章底部的#号标签 修改模板/themes/next/layout/_macro/post.swig，搜索 rel=&quot;tag&quot;&gt;#，将其中的 # 换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
